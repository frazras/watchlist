<?php


/**
 * Returns a structured array defining the fields created by this content type.
 *
 * @return
 *  An associative array specifying the fields we wish to add to our
 *  new node type.
 */
function _watchlist_installed_fields() {
  $t = get_t();

  return array( array(
    'translatable' => '0',
    'entity_types' => array(),
    'settings' => array(
      'max_length' => '4',
    ),
    'storage' => array(
      'type' => 'field_sql_storage',
      'settings' => array(),
      'module' => 'field_sql_storage',
      'active' => '1',
      'details' => array(
        'sql' => array(
          'FIELD_LOAD_CURRENT' => array(
            'field_data_field_ticker' => array(
              'value' => 'field_ticker_value',
              'format' => 'field_ticker_format',
            ),
          ),
          'FIELD_LOAD_REVISION' => array(
            'field_revision_field_ticker' => array(
              'value' => 'field_ticker_value',
              'format' => 'field_ticker_format',
            ),
          ),
        ),
      ),
    ),
    'foreign keys' => array(
      'format' => array(
        'table' => 'filter_format',
        'columns' => array(
          'format' => 'format',
        ),
      ),
    ),
    'indexes' => array(
      'format' => array(
        'format',
      ),
    ),
    'field_name' => 'field_ticker1',
    'type' => 'text',
    'module' => 'text',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '-1',
    'deleted' => '0',
    'columns' => array(
      'value' => array(
        'type' => 'varchar',
        'length' => '4',
        'not null' => FALSE,
      ),
      'format' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'bundles' => array(
      'node' => array(
        'watchlists',
      ),
    ),
  ));

}

/**
 * Returns a structured array defining the instances for this content type.
 *
 * @return
 *  An associative array specifying the instances we wish to add to our new
 *  node type.
 */
function _watchlist_installed_instances() {
  $t = get_t();
  return array(array(
    'label' => 'Ticker',
    'widget' => array(
      'weight' => '32',
      'type' => 'text_textfield',
      'module' => 'text',
      'active' => 1,
      'settings' => array(
        'size' => '4',
      ),
    ),
    'settings' => array(
      'text_processing' => '0',
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'above',
        'type' => 'text_default',
        'settings' => array(),
        'module' => 'text',
        'weight' => 1,
      ),
      'teaser' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
    ),
    'required' => 0,
    'description' => '',
    'default_value' => NULL,
    'field_name' => 'field_ticker1',
    'entity_type' => 'node',
    'bundle' => 'watchlists',
    'deleted' => '0',
  ));
}


/**
 * Implements hook_install().
 */
function watchlist_install() {
  $t = get_t();


  // machine name of the content type
  $name = 'watchlists';

  // define the node type
  $watchlists = array(
    'type' => $name,
    'name' => $t('Watchlists'),
    'base' => 'node_content',
    'title_label' => $t('Watchlist Name'),
    'description' => $t('Watchlist post.'),
    'custom' => TRUE,
  );

  // set other node defaults not declared above
  $content_type = node_type_set_defaults($watchlists);

  // add the body field
  node_add_body_field($content_type, $t('Description'));

  // save the content type
  node_type_save($content_type);


  // add peristant variables that control settings
  variable_set('additional_settings__active_tab_' . $name, 'edit-menu');
  variable_set('node_preview_' . $name, 2);
  variable_set('node_options_' . $name, array(0 => 'status', 1 => 'promote'));
  variable_set('node_submitted_' . $name, 0);
  variable_set('menu_options_' . $name, array());
  variable_set('menu_parent_' . $name, 'main-menu:0');

//print_r( _watchlist_installed_fields());
  // create all the fields we are adding to our content type
  foreach (_watchlist_installed_fields() as $field) {
   // print_r($field);
        print("------------------------111-\n"); 
        print_r($prior_field = field_read_field($field['field_name'], array('include_inactive' => TRUE)));
    field_create_field($field);
    print("-------------------------\n");
  }

  // create all the instances for our fields
  foreach (_watchlist_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = $watchlists['type'];
    field_create_instance($instance);
  }
}

/**
 * Implements hook_uninstall().
 */
function watchlist_uninstall() {
  // machine name of the content type
  $name = 'watchlists';

  // gather all watchlist nodes created
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => $name));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // delete all the watchlist nodes at once
  node_delete_multiple($nids);

  // remove peristant variables that control settings
  variable_del('additional_settings__active_tab_' . $name);
  variable_del('node_preview_' . $name);
  variable_del('node_options_' . $name);
  variable_del('node_submitted_' . $name);
  variable_del('menu_options_' . $name);
  variable_del('menu_parent_' . $name);


  // find all fields and delete them
  foreach (array_keys(_watchlist_installed_fields()) as $field) {
    field_delete_field($field['field_name']);
  }

  // find all fields and delete instance
  $instances = field_info_instances('node', $name);
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // delete our content type
  node_type_delete($name);

  // purge all field infromation
  field_purge_batch(1000);
}

?>
